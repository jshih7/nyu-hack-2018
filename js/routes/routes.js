"use strict";

const fs = require("fs");
const path = require("path");
const express = require("express");
const Sequelize = require("sequelize");
const { or, and } = Sequelize.Op;

const database = "ReAction";
const username = "reaction";
const password = "nyuhack2018";
const options = {
	host: "localhost",
	dialect: "mysql",
	directory: path.join(__dirname, "js/models"), // where to put models
    operatorsAliases: false, // remove warnings
}
const sequelize = new Sequelize(database, username, password, options);

// Load all database models generated by sequelize-auto
const modelPath = path.join(__dirname, "../models");
const modelFiles = fs.readdirSync(modelPath);
modelFiles.forEach(function(modelFileName) {
    // models stored in sequelize.models Object
    sequelize.import(path.join(modelPath, modelFileName));
});

// All database models
const Users = sequelize.models.Users;
if (!sequelize.models || !Users) {
    console.log("ERROR: Missing Sequelize models");
}

const router = express.Router();

// Home page 
router.route("/")
.all(function(req, res, next) {
    // currently hard redirecting to register/login for testing purposes
    res.sendFile(path.join(__dirname, "../public/startbootstrap-new-age-gh-pages/index.html"));
});

// Login page
router.route("/login")
.get(function(req, res) {
    res.render("login");
})
.post(function(req, res) {
    // Return 400 bad request if fields are missing
    // ex. request through curl rather than HTML form
    if (!req.body.username || !req.body.password) {
        res.status("400");
        res.send("Bad request");
    } else {
        Users.findOne({
            where: {
                user: req.body.username,
                pass: req.body.password,
            }
        })
        .then(function(results) {
            if(results) {
                res.send("Login successful! Welcome back " + results.dataValues.fname + "!")
            } else {
                res.render("login", {
                    error: "Invalid login username or password.",
                });
            }
        });
    }
});

// Register page
router.route("/register")
.get(function(req, res) {
    res.render("register");
})
.post(function(req, res) {
    // Return 400 bad request if fields are missing
    // ex. request through curl rather than HTML form
    if (!req.body.username || !req.body.password
        || !req.body.email || !req.body.phone
        || !req.body.phone || !req.body.email) {
        res.status("400");
        res.send("Bad request");
    } else {
        // Check if user or e-mail already exists
        Users.findOne({
            where: {
                [or]: {
                    user: req.body.username,
                    email: req.body.email,
                }
            }
        })
        .then(function(results) {
            if(!results) {
                // TODO: generate password hash
                const usertype = 'donor'; // temporary 
                const newUser = {
                    utype: usertype,
                    user: req.body.username,
                    pass: req.body.password,
                    fname: req.body.firstname,
                    lname: req.body.lastname,
                    phone: req.body.phone,
                    email: req.body.email,
                    regtime: sequelize.fn("NOW"),
                };
                return Users.create(newUser)
                .then(function(results) {
                    res.send("Registration successful! Hello " + results.dataValues.fname + "!");
                });
            } else {
                res.render('register', {
                    error: "Username/e-mail is already taken.",
                });
            }
        })
        .catch(function(err) {
            console.log("ERROR with POST to /register: ", err);
        });
    }
});

module.exports = router;
